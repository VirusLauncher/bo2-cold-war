#include maps/mp/_utility;
#include common_scripts/utility;
#include maps/mp/zombies/_zm;
#include maps/mp/zombies/_zm_perks;
#include maps/mp/zombies/_zm_utility;
#include maps/mp/gametypes_zm/_hud_util;
#include maps/mp/gametypes_zm/_hud_message;

init()
{
	precacheshader("damage_feedback");
	precacheshader("menu_mp_fileshare_custom");
	
	level.perk_purchase_limit = getDvarIntDefault("cmPlayerPerkLimit", 9);
	level.cmPerkDoubleTapFireRate = getDvarFloatDefault("cmPerkDoubleTapFireRate", 0.5);
	setdvar("perk_weapRateMultiplier", level.cmPerkDoubleTapFireRate);

	level._random_zombie_perk_cost = undefined;
	level._challenges = undefined;
	
	setDvar("player_strafeSpeedScale", 1);
	setDvar("player_sprintStrafeSpeedScale", 1);
	setDvar("player_backSpeedScale", 1);
	setDvar("jump_slowdownEnable", 0);
	
	level thread onPlayerConnect();
}

onPlayerConnect()
{
	for(;;)
	{
		level waittill("connected", player);
		player thread zombie_health();
		player thread visuals();
		player thread onPlayerSpawned();
	}
}

zombie_health()
{
	level endon("end_game");
	self endon("disconnect");
	for(;;)
	{
		level waittill("start_of_round");
		if(level.zombie_health > 10000)
		{
			level.zombie_health = 10000;
		}
		wait 0.05;
	}
}

visuals()
{
	self setClientDvar("r_fog", 1);
	self setClientDvar("r_dof_enable", 0);
	self setClientDvar("r_lodBiasRigid", -1000);
	self setClientDvar("r_lodBiasSkinned", -1000);
	self setClientDvar("r_lodScaleRigid", 1);
	self setClientDvar("r_lodScaleSkinned", 1);
	self useservervisionset(1);
	self setvisionsetforplayer("remote_mortar_enhanced", 0);
}

onPlayerSpawned()
{
	level endon("end_game");
	self endon("disconnect");
	self waittill("spawned_player");
	self setPerk("specialty_unlimitedsprint");	
	self thread drop();
	self thread rof();
	self thread rof_ready();
	self thread quick_revive();
	self thread quick_revive_ready();
	self thread staminup();
	self thread health_bar_hud();
}

drop()
{
	level endon("end_game");
	self endon("disconnect");
	for (;;) 
	{
		if (self meleebuttonpressed()) 
		{
			duration = 0;
			while (self meleebuttonpressed()) 
			{
				duration += 1;
				if (duration == 25) 
				{
					weap = self getCurrentWeapon();
					self dropItem(weap);
					break;
				}
				wait 0.05;
			}
		}
		wait 0.05;
	}
}

rof()
{
	level endon("end_game");
	self endon("disconnect");
	rof_hud = newClientHudElem(self);
	rof_hud.alignx = "center";
	rof_hud.aligny = "bottom";
	rof_hud.horzalign = "user_center";
	rof_hud.vertalign = "user_bottom";
	rof_hud.y -= 35;
	rof_hud.alpha = 0;
	rof_hud.color = ( 1, 1, 1 );
	rof_hud.hidewheninmenu = 1;
	rof_hud setShader("menu_mp_fileshare_custom", 32, 32);
	
	self waittill_any("perk_acquired", "perk_lost");
	for(;;)
	{
		if (self.perks_active.size >= 3 && self getVelocity() >= 1)
		{	
			duration = 0;
			rof_hud.alpha = 0;
			self unsetPerk("specialty_rof");
			while (self getVelocity() == 0) 
			{
				duration += 1;
				if (duration >= 100)
				{
					rof_hud.alpha = 1;
					self setPerk("specialty_rof");
				}
				wait 0.05;
			}
		}
		else 
		{
			rof_hud.alpha = 0;
			self unsetPerk("specialty_rof");
		}
		wait 0.05;
	}
}

rof_ready()
{
	level endon("end_game");
	self endon("disconnect");
	rof_ready_hud = newClientHudElem(self);
	rof_ready_hud.alignx = "right";
	rof_ready_hud.aligny = "bottom";
	rof_ready_hud.horzalign = "user_right";
	rof_ready_hud.vertalign = "user_bottom";
	rof_ready_hud.x -= 155;
	rof_ready_hud.alpha = 0;
	rof_ready_hud.color = ( 1, 1, 1 );
	rof_ready_hud.hidewheninmenu = 1;
	rof_ready_hud setShader("specialty_doubletap_zombies", 32, 32);
	
	self waittill_any("perk_acquired", "perk_lost");
	for(;;)
	{
		if (self.perks_active.size >= 3)
		{	

			rof_ready_hud.alpha = 1;
		}
		else 
		{
			rof_ready_hud.alpha = 0;
		}
		wait 0.05;
	}
}

quick_revive()
{
	level endon("end_game");
	self endon("disconnect");
	for (;;)
	{
		if (self hasperk("specialty_quickrevive") && self.health < self.maxHealth)
		{
			self.health += 1;
		}
		wait 0.1;
	}
}

quick_revive_ready()
{
	level endon("end_game");
	self endon("disconnect");
	qr_hud = newClientHudElem(self);
	qr_hud.alignx = "left";
	qr_hud.aligny = "bottom";
	qr_hud.horzalign = "user_left";
	qr_hud.vertalign = "user_bottom";
	qr_hud.x += 155;
	qr_hud.alpha = 0;
	qr_hud.color = ( 1, 1, 1 );
	qr_hud.hidewheninmenu = 1;
	qr_hud setShader("damage_feedback", 32, 32);
	
	self waittill_any("perk_acquired", "perk_lost");
	for(;;)
	{
		if (self hasperk("specialty_quickrevive") && getPlayers().size <= 1)
		{	

			qr_hud.alpha = 1;
		}
		else 
		{
			qr_hud.alpha = 0;
		}
		wait 0.05;
	}
}

staminup()
{
	level endon("end_game");
	self endon("disconnect");
	for (;;)
	{
		self waittill_any("perk_acquired", "perk_lost");
	
		if (self hasperk("specialty_longersprint"))
		{
			self setperk("specialty_movefaster");
			self setperk("specialty_fallheight");
		}
		else
		{
			self unsetperk("specialty_movefaster");
			self unsetperk("specialty_fallheight");
		}
	}
}

health_bar_hud()
{
	level endon("end_game");
	self endon("disconnect");
	flag_wait("initial_blackscreen_passed");

	health_bar = self createprimaryprogressbar();
	if (level.script == "zm_tomb" || level.script == "zm_buried")
	{
		health_bar setpoint(undefined, "BOTTOM", -360, -95);
	}
	else
	{
		health_bar setpoint(undefined, "BOTTOM", -360, -70);
	}
	health_bar.hidewheninmenu = 1;
	health_bar.bar.hidewheninmenu = 1;
	health_bar.barframe.hidewheninmenu = 1;

	health_bar_text = self createprimaryprogressbartext();
	if (level.script == "zm_tomb" || level.script == "zm_buried")
	{
		health_bar_text setpoint(undefined, "BOTTOM", -285, -95);
	}
	else
	{
		health_bar_text setpoint(undefined, "BOTTOM", -285, -70);
	}
	health_bar_text.hidewheninmenu = 1;

	while (1)
	{
		if (isDefined(self.e_afterlife_corpse))
		{
			if (health_bar.alpha != 0)
			{
				health_bar.alpha = 0;
				health_bar.bar.alpha = 0;
				health_bar.barframe.alpha = 0;
				health_bar_text.alpha = 0;
			}
			
			wait 0.05;
			continue;
		}

		if (health_bar.alpha != 1)
		{
			health_bar.alpha = 1;
			health_bar.bar.alpha = 1;
			health_bar.barframe.alpha = 1;
			health_bar_text.alpha = 1;
		}

		health_bar updatebar(self.health / self.maxhealth);
		health_bar_text setvalue(self.health);

		wait 0.05;
	}
}
